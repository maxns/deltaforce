    public static ${model.className} create${model.className}() { return new ${model.classImplName}(); }

    public $class_name($model.className from) { super( from ); }
    public $class_name() { super( new ${model.classImplName}() );}


    @Override public ${model.className} create() { return (${model.className}) initBuilder( create${model.className}() ); }

    @Override public $class_name from($model.className from) { super.from(from==null?new ${model.classImplName}():from); return this; }
    @Override public $class_name op(Delta.OP op) { super.op(op); return this; }

    @Override public ${model.className} apply() {
        return applyTo(from());
    }

    @Override public ${model.className} applyAndClearDeltas() {
        ${model.className} result = apply();
        clearDeltas();
        return result;
    }

    @Override public void clearDeltas() {
        deltaMap().clear();
    }

    public boolean containsDelta() {
        return deltaMap().size() > 0;
    }

    #if( ${model.chainSetters} )
        #set ($return_type = ${class_name})
        #set ($return_statement = "return this;")
    #else
        #set ($return_type = "void")
        #set ($return_statement = "")
    #end

    #if ( ${model.addOverrideForAccessors} )
        #set ($override = "@Override")
    #else
        #set ($override = "")
    #end

#foreach($field in $fields)
    // AccessorType : ${field.accessorType}

    #if( ${field.accessible} )
        #set($from_value = "from().${field.name}")
    #else
        #set($from_value = "from().${field.accessor}()")
    #end

    #if( ${field.accessorType} == "field" )
        #set ($alias = "${field.alias}")

    /**
    * Sets the value on the underlying and records a delta (if values are different)
    */
    #if( ${field.hasSetter} )
    ${override}
    #end
    public ${return_type} set$alias(final $field.type newValue) {
        // first check if we already have a delta of this field

        if(deltaMap().containsKey("${field.name}")) {
            ${field.boxedType} curValue = ($field.boxedType) deltaMap().get("${field.name}").getOldValue();
            Delta.OP op = compare(curValue, newValue);
            if(op != Delta.OP.NOOP) {
                addDelta(new Delta(op, "${field.name}", curValue, newValue));
            } else {
                removeDelta("${field.name}");
            }
        }else {
            #if( ${field.primitive} )
                ${field.boxedType} curValue = ${field.boxedType}.valueOf( from().${field.accessor}() );
            #else
                ${field.boxedType} curValue = $from_value;
            #end
            Delta.OP op = compare(curValue, newValue);
            if(op != Delta.OP.NOOP) {
                addDelta(new Delta(op, "${field.name}", curValue, newValue));
            }
        }

        ${return_statement}
    }
    /** returns either a value tht's already been set or if none provided, previous value */
    ${override}
    public ${field.type} ${field.accessor}() {
        return deltaMap().containsKey("${field.name}") ? (${field.type}) delta("${field.name}").getNewValue()
                                                        : $from_value;
    }

    #elseif( ${field.accessorType}=="map" )
        #set ($alias = "${field.alias}")

    ${override}
    public ${return_type} set$alias(final ${field.key.type} key, final ${field.value.type} value) {

        ${field.value.boxedType} curValue =
        #if( ${field.primitive} ) ${field.boxedType}.valueOf( from().get$alias(key) );
        #else from().get$alias(key); #end

        Delta.OP op = compare(curValue, value);

        if(op!=Delta.OP.NOOP) addMapDelta("${field.name}", $from_value, new Delta(op, key, curValue, value));

        ${return_statement}
    }
    #elseif (${field.accessorType}=="collection")

    public $class_name add${field.alias}(final ${field.value.type} value) { addToCollection( "${field.name}", $from_value, value ); return this; }
    public $class_name remove${field.alias}(final ${field.value.type} value) { removeFromCollection( "${field.name}", $from_value, value); return this; }

    #elseif (${field.accessorType}=="buildable")

    public ${field.builderFullClassName} get${field.alias}() {
        BuildableDelta<${field.type}> bd = ((BuildableDelta<${field.type}>) delta("${field.name}"));

        if(bd == null) {
            bd = createBuildableDelta("${field.name}", $from_value, null, new ${field.builderFullClassName}() );
            addDelta(bd);
        }

        return (${field.builderFullClassName}) ((BuildableDelta)delta("${field.name}")).getBuilder();
    }
    /** deletes the object (ie marks the delta to delete it) */
    ${override} public ${return_type} delete${field.alias}() { return set${field.alias}(null); }
    ${override} public ${return_type} create${field.alias}() { return set${field.alias}( get${field.alias}().create() ); }
    ${override} public ${return_type} update${field.alias}() { return set${field.alias}( $from_value ); }


    /** edits the value using a builder */
    ${override}
    public ${return_type} set${field.alias}(final ${field.type} newValue) {
        get${field.alias}(); // initialise hack

        // let's see if we have the delta setup already
        BuildableDelta<${field.type}> bd = ((BuildableDelta<${field.type}>) delta("${field.name}"));

        bd.setOp(compare(bd.getOldValue(), newValue));
        bd.setNewValue(newValue);

        ${return_statement}
    }
    #end

#end


    /**
    * apply deltas
    * @Override
    * @param to ${model.className} to apply deltas to
    * @return ${model.className} to object with deltas applies
    */
    public ${model.className} applyTo(${model.className} to) {

        #foreach($field in $fields)
            #set ($alias = "${field.alias}")
            #set ($name_part = "${util.StringUtils.capitalizeFirstLetter($field.name)}")

            if(deltaMap().containsKey("${field.name}")){
            #if( ${field.accessorType} == "field" )
                #if( !$field.hasSetter )
                if (to instanceof ${model.classImplName}) {
                    ((${model.classImplName})to).#if( ${field.accessible} )${field.name} = ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue(); #else set$name_part( ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue() );#end
                }
                #else
                to.#if( ${field.accessible} )${field.name} = ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue(); #else set$name_part( ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue() );#end
                #end
            #elseif (${field.accessorType} == "map")
                #if( ${field.accessible} )
                delta("${field.name}").applyTo(to.${field.name});
                #else
                to.set${name_part}( ($field.type) delta("${field.name}").applyTo( to.get${name_part}() ) );
                #end
            #elseif (${field.accessorType}=="collection")
                #if( ${field.accessible} )
                to.${field.name} = (${field.type}) delta("${field.name}").applyTo(to.${field.name});
                #else
                to.set$name_part( (${field.type}) delta("${field.name}").applyTo(to.get$name_part()) );
                #end
            #elseif (${field.accessorType}=="buildable")
                #if( ${field.accessible} )
                to.${field.name} = (${field.type}) delta("${field.name}").applyTo(delta("${field.name}").getNewValue());
                #else
                to.set$name_part( (${field.type}) delta("${field.name}").applyTo(delta("${field.name}").getNewValue()) );
                #end
            #end
            }
        #end

        return to;

    }
